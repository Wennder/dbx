<?php
/**
 * @title: Fachmodell Exploit
 * @version:0.1
 * @autor: js-helper
 * @desc:  in dieser Klasse werden die fachlichen Anforderungen und erforderlichen Funktionen
 * 		   eines Exploits gekapselt. Der content kann mit syntax highlighning ausgegeben werden
 * @todo:  Autor als Referenz auf einen Benutzer ausgeben?
 * @todo: wie soll die zeit ausgegeben werden?
 */
/***UML***/
#category;
#date //unixtimestamp;
#verify //boolean;
#hits ;
#platform;
#autor;
#codeLanguage //geshi;
#title
#content
/***UML***/

abstract class Exploit extends Dbhelper{
	/**Attributes**/

	protected $category=0;
	protected $date=0 ;
	protected $verified=0;
	protected $hits=0 ;
	protected $autor="";
	protected $codeLanguage='none' ;
	protected $title="";
	protected $content="";
	protected $file;
	protected $platform="";
	/**__construct()**/

	public function __construct(){
		$this->date=getdate();
		$this->hits=0;
		$this->tablename="cms_exploit";
		/*	$this->category= $category;
		 $this->date = $date ;
		 $this->verify = $verify ;
		 $this->count = $count ;
		 $this->platform= $platform;
		 $this->autor= $autor;
		 $this->codeLanguage = $codeLanguage ;*/
	}//__construct



	public function getFormatedCode(){
		$content=$this->content();
	
		$content=str_replace(array("&lt;", "&gt;", '&amp;', '&#039;', '&quot;','&lt;', '&gt;'), array("<", ">",'&','\'','"','<','>'), htmlspecialchars_decode($content, ENT_NOQUOTES)); 		
		$geshi = new GeSHi($content, $this->codeLanguage);
		$value=  $geshi->parse_code();
		return ($value);
	}


	/**SetGetter**/
	public function date ($date =""){
		if (empty($date )){
			return  $this->date;
		}else{
			$this->date =$date ;
		}
	}//date

	/**
	 *
	 * erhoeht die hits um 1. Sollte immer aufgerufen werden, wenn der Exploit angezeigt wird
	 */
	public function hits(){return $this->hits+=1;}	//Ausgabe Klicks
	public function category($category=""){ if (empty($category)){return $this->category; }else{$this->category=$category; } }
	public function verified($verified=""){ if (empty($verified)){return $this->verified; }else{$this->verified=$verified; } }
	public function autor($autor=""){ if (empty($autor)){return $this->autor; }else{$this->autor=$autor; } }
	public function codeLanguage ($codeLanguage =""){ if (empty($codeLanguage )){return $this->codeLanguage ; }else{$this->codeLanguage =$codeLanguage ; } }
	public function title($title=""){ if (empty($title)){return $this->title; }else{$this->title=$title; } }
	public function content($content=""){ if (empty($content)){return $this->content; }else{$this->content=$content; } }
	public function file($file=""){ if (empty($file)){return $this->file; }else{$this->file=$file; } }
 	public function platform($platform=""){ if (empty($platform)){return $this->platform; }else{$this->platform=$platform; } }
	/**SetGetter**/


	public function __toString(){
		$retval="\n";
		$retval.="title {$this->title()}\n";
		$retval.="category: {$this->category()}\n";
		$retval.="date: {$this->date()}\n";
		$retval.="verify:{$this->verify()}\n";
		$retval.="count:{$this->count()}\n";
		$retval.="autor:{$this->autor()}\n";
		$retval.="code:{$this->codeLanguage}";




		return $retval;
	}
}//class
